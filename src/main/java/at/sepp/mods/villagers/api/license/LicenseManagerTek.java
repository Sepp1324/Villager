package at.sepp.mods.villagers.api.license;

import at.sepp.mods.villagers.api.util.ByteHex;
import at.sepp.mods.villagers.api.util.DateParser;

import java.security.GeneralSecurityException;
import java.util.Date;

public class LicenseManagerTek extends LicenseManager {
    private static final String

    private static final int MS_A_DAY = 86400000;

    private byte[] key;

    private License lic;

    public LicenseManagerTek(String licData) {
        try {
            this.lic = License.loadLicense(licData);
        } catch (LicenseNotFoundException e) {
            throw new RuntimeException(e.getMessage());
        }
        try {
            this.key = ByteHex.convert
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public LicenseManagerTek() {
        try {
            this.lic = License.loadLicense();
        } catch (LicenseNotFoundException e) {
            throw new RuntimeException(e.getMessage());
        }
        try {
            this.key = ByteHex.convert
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public boolean isValid() throws GeneralSecurityException {
        return isLicenceValid(this.lic);
    }

    public boolean isLicenceValid(License lic) throws GeneralSecurityException {
        String signature = lic.getSignature();
        if (signature == null || signature.trim().length() == 0)
            return false;
        boolean valid = SignatureUtil.verify(lic.format(), ByteHex.convert(signature), this.key);
        if (!valid)
            return false;
        if (daysLeft() < 0)
            return false;
        return true;
    }

    public int daysLeft() {
        String expiration = this.lic.getExpiration();
        if (expiration == null)
            return -1;
        if (expiration.trim().length() == 0 || expiration
                .indexOf("never") != -1)
            return 0;
        Date licDate = DateParser.toUtilDate(expiration);
        long time = licDate.getTime() - System.currentTimeMillis();
        int days = 1 + (int)(time / 86400000L);
        return days;
    }

    public String getFeature(String name) {
        return this.lic.getFeature(name);
    }

    public String getLicense() {
        return this.lic.getRawData();
    }
}
